//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import java.util.*;
/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R extends RetVal,A extends Env> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   public static final String not_found = "Symbol '%s' not found in the environment.";
   public static final String par_mis_match = "foo: arity mismatch;\n" +
           " the expected number of arguments does not match the given number\n" +
           "  expected: %d\n" +
           "  given: %d";
   public static ScriptEngineManager sem = new ScriptEngineManager();
   public static ScriptEngine se = sem.getEngineByName("JavaScript");
   public static Boolean DEFINITION = false;

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) {
      String tokenImage = n.tokenImage;
      return (R) new StrVal(tokenImage);
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( Line() )*
    * f1 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, null);
      return _ret;
   }

   /**
    * f0 -> Expression()
    */
   public R visit(Line n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(_ret != null) {
         R op = (R) fetchRetVal(_ret.getVal().toString(), argu);
         if(op == null) {
            _ret.displayVal();
         } else {
            op.displayVal();
         }
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ListExpr()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | MultiplyExpression()
    *       | DivideExpression()
    *       | GTExpression()
    *       | LTExpression()
    *       | EQExpression()
    *       | IfExpression()
    *       | DefineExpression()
    *       | Assignment()
    *       | ProcedureExp()
    *       | CarExpr()
    *       | CdrExpr()
    *       | Application()
    */
   public R visit(Expression n, A argu) {
      R _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      String image = n.f0.tokenImage;
      Integer literal = Integer.parseInt(image);
      R _ret= (R) new IntVal(literal);
      return _ret;
   }

   /**
    * f0 -> "#t"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret = (R) new BoolValue(true);
      return _ret;
   }

   /**
    * f0 -> "#f"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret = (R) new BoolValue(false);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "list "
    * f2 -> ( IntegerLiteral() )*
    * f3 -> ")"
    */
   public R visit(ListExpr n, A argu) {
      R _ret=null;
      R list = null;
      List<Integer> integerArrayList = new ArrayList<>();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      for(Node node : n.f2.nodes) {
         integerArrayList.add(((IntVal) node.accept(this, argu)).getVal());
      }
      _ret = (R) new ListVal(integerArrayList);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "+"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null, firstOpr = null, secOpr = null;
      if(DEFINITION) {
         firstOpr = n.f2.accept(this, argu);
         secOpr = n.f3.accept(this, argu);
         String exp = firstOpr.getVal() + "+" + secOpr.getVal();
         _ret = (R) new StrVal(exp);
      } else {
         firstOpr = fetchOpr(n.f2.accept(this, argu), argu);
         secOpr = fetchOpr(n.f3.accept(this, argu), argu);
         if (firstOpr != null && secOpr != null) {
            if (firstOpr instanceof IntVal && secOpr instanceof IntVal) {
               _ret = (R) new IntVal((Integer) firstOpr.getVal() + (Integer) secOpr.getVal());
            } else {
               if (!(firstOpr instanceof IntVal)) {
                  printMsg(String.format(not_found, firstOpr.getVal()));
               }
               if (!(secOpr instanceof IntVal)) {
                  printMsg(String.format(not_found, secOpr.getVal()));
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "-"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null, firstOpr = null, secOpr = null;
      if(DEFINITION) {
         firstOpr = n.f2.accept(this, argu);
         secOpr = n.f3.accept(this, argu);
         String exp = firstOpr.getVal() + "-" + secOpr.getVal();
         _ret = (R) new StrVal(exp);
      } else {
         firstOpr = fetchOpr(n.f2.accept(this, argu), argu);
         secOpr = fetchOpr(n.f3.accept(this, argu), argu);
         if (firstOpr != null && secOpr != null) {
            if (firstOpr instanceof IntVal && secOpr instanceof IntVal) {
               _ret = (R) new IntVal((int) firstOpr.getVal() - (int) secOpr.getVal());
            } else {
               if (!(firstOpr instanceof IntVal)) {
                  printMsg(String.format(not_found, firstOpr.getVal()));
               }
               if (!(secOpr instanceof IntVal)) {
                  printMsg(String.format(not_found, secOpr.getVal()));
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "*"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(MultiplyExpression n, A argu) {
      R _ret=null, firstOpr = null, secOpr = null;
      if(DEFINITION) {
         firstOpr = n.f2.accept(this, argu);
         secOpr = n.f3.accept(this, argu);
         _ret = (R) new StrVal(firstOpr.getVal() + "*" + secOpr.getVal());
      } else {
         firstOpr = fetchOpr(n.f2.accept(this, argu), argu);
         secOpr = fetchOpr(n.f3.accept(this, argu), argu);
         if (firstOpr != null && secOpr != null) {
            if (firstOpr instanceof IntVal && secOpr instanceof IntVal) {
               _ret = (R) new IntVal((int) firstOpr.getVal() * (int) secOpr.getVal());
            } else {
               if (!(firstOpr instanceof IntVal)) {
                  printMsg(String.format(not_found, firstOpr.getVal()));
               }
               if (!(secOpr instanceof IntVal)) {
                  printMsg(String.format(not_found, secOpr.getVal()));
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "/"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(DivideExpression n, A argu) {
      R _ret=null, firstOperand = null, secondOperand = null;
      if(DEFINITION) {
         firstOperand = n.f2.accept(this, argu);
         secondOperand = n.f3.accept(this, argu);
         _ret = (R) new StrVal(firstOperand.getVal() + "/" + secondOperand.getVal());
      } else {
         firstOperand = fetchOpr(n.f2.accept(this, argu), argu);
         secondOperand = fetchOpr(n.f3.accept(this, argu), argu);
         if (firstOperand != null && secondOperand != null) {
            if (firstOperand instanceof IntVal && secondOperand instanceof IntVal) {
               _ret = (R) new IntVal((int) firstOperand.getVal() / (int) secondOperand.getVal());
            } else {
               if (!(firstOperand instanceof IntVal)) {
                  printMsg(String.format(not_found, firstOperand.getVal()));
               }
               if (!(secondOperand instanceof IntVal)) {
                  printMsg(String.format(not_found, secondOperand.getVal()));
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> ">"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(GTExpression n, A argu) {
      R _ret=null, firstOpr = null, secOpr = null;
      if(DEFINITION) {
         firstOpr = n.f2.accept(this, argu);
         secOpr = n.f3.accept(this, argu);
         _ret = (R) new StrVal(firstOpr.getVal() + ">" + secOpr.getVal());
      } else {
         firstOpr = fetchOpr(n.f2.accept(this, argu), argu);
         secOpr = fetchOpr(n.f3.accept(this, argu), argu);
         if(firstOpr != null && secOpr != null) {
            if(firstOpr instanceof IntVal && secOpr instanceof IntVal) {
               if((int) firstOpr.getVal() > (int) secOpr.getVal()) {
                  _ret = (R) new BoolValue(true);
               } else {
                  _ret = (R) new BoolValue(false);
               }
            } else {
               if(!(firstOpr.getVal() instanceof IntVal)) {
                  printMsg(String.format(not_found, firstOpr.getVal()));
               }
               if(!(secOpr.getVal() instanceof IntVal)) {
                  printMsg(String.format(not_found, secOpr.getVal()));
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "<"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(LTExpression n, A argu) {
      R _ret=null, firstOpr = null, secOpr = null;
      if(DEFINITION) {
         firstOpr = n.f2.accept(this, argu);
         secOpr = n.f3.accept(this, argu);
         String exp = firstOpr.getVal() + "<" + secOpr.getVal();
         _ret = (R) new StrVal(exp);
      } else {
         firstOpr = fetchOpr(n.f2.accept(this, argu), argu);
         secOpr = fetchOpr(n.f3.accept(this, argu), argu);
         if (firstOpr != null && secOpr != null) {
            if (firstOpr instanceof IntVal && secOpr instanceof IntVal) {
               if ((Integer) firstOpr.getVal() < (Integer) secOpr.getVal()) {
                  _ret = (R) new BoolValue(true);
               } else {
                  _ret = (R) new BoolValue(false);
               }
            } else {
               if (!(firstOpr.getVal() instanceof IntVal)) {
                  printMsg(String.format(not_found, firstOpr.getVal()));
               }
               if (!(secOpr.getVal() instanceof IntVal)) {
                  printMsg(String.format(not_found, secOpr.getVal()));
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(EQExpression n, A argu) {
      R _ret=null, firstOpr = null, secOpr = null;
      if(DEFINITION) {
         firstOpr = n.f2.accept(this, argu);
         secOpr = n.f3.accept(this, argu);
         String exp = firstOpr.getVal() + "==" + secOpr.getVal();
         _ret = (R) new StrVal(exp);
      } else {
         firstOpr = fetchOpr(n.f2.accept(this, argu), argu);
         secOpr = fetchOpr(n.f3.accept(this, argu), argu);
         if (firstOpr != null && secOpr != null) {
            if (firstOpr instanceof IntVal && secOpr instanceof IntVal) {
               if (firstOpr.getVal() == secOpr.getVal()) {
                  _ret = (R) new BoolValue(true);
               } else {
                  _ret = (R) new BoolValue(false);
               }
            } else if (firstOpr instanceof BoolValue && secOpr instanceof BoolValue) {
               if (firstOpr.getVal() == secOpr.getVal()) {
                  _ret = (R) new BoolValue(true);
               } else {
                  _ret = (R) new BoolValue(false);
               }
            } else {
               if (!(firstOpr.getVal() instanceof IntVal)) {
                  printMsg(String.format(not_found, firstOpr.getVal()));
               }
               if (!(secOpr.getVal() instanceof IntVal)) {
                  printMsg(String.format(not_found, secOpr.getVal()));
               }
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "if"
    * f2 -> Expression()
    * f3 -> Expression()
    * f4 -> Expression()
    * f5 -> ")"
    */
   public R visit(IfExpression n, A argu) {
      R _ret=null;
      if(DEFINITION) {
         StringBuilder ifClause = new StringBuilder("if(");
         ifClause.append(n.f2.accept(this, argu).getVal().toString()).append(")");
         ifClause.append(n.f3.accept(this, argu).getVal().toString()).append("; else ");
         ifClause.append(n.f4.accept(this, argu).getVal().toString()).append(";");
         StrVal stringValue = new StrVal(ifClause.toString());
         return (R) stringValue;
      } else {
         R condition = n.f2.accept(this, argu);
         if(condition instanceof BoolValue) {
            if((Boolean) condition.getVal()) {
               return n.f3.accept(this, argu);
            } else {
               return n.f4.accept(this, argu);
            }
         } else {
            printMsg("If expression is not valid.");
         }
      }

      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "define"
    * f2 -> Identifier()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(DefineExpression n, A argu) {
      R _ret=null;
      R defName = n.f2.accept(this, argu);
      R expression = n.f3.accept(this, argu);
      if(defName != null && expression != null) {
         if(expression instanceof ProcVal) {
            if(((ProcVal) expression).getParEnv() == null)
               ((ProcVal) expression).setParEnv(argu);
         }
         argu.map.put((String) defName.getVal(), expression);
      }
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String tokenImg = n.f0.tokenImage;
      _ret = (R) new StrVal(tokenImg);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "car"
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(CarExpr n, A argu) {
      R _ret=null;
      R arrayList = null;
      R listId = n.f2.accept(this, argu);
      if(listId instanceof StrVal) {
         arrayList = (R) fetchRetVal(listId.getVal().toString(), argu);
      } else if(listId instanceof ListVal){
         arrayList = listId;
      }
      if(arrayList instanceof ListVal) {
         List<Integer> list = ((ListVal) arrayList).getVal();
         if(list != null && !list.isEmpty()) {
            _ret = (R) new IntVal(list.get(0));
         } else {
            printMsg("car on empty list is not valid.");
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "cdr"
    * f2 -> Expression()
    * f3 -> ")"
    */
   public R visit(CdrExpr n, A argu) {
      R _ret=null;
      R arrayList = null;
      R listId = n.f2.accept(this, argu);
      if(listId instanceof StrVal) {
         arrayList = (R) fetchRetVal(listId.getVal().toString(), argu);
      } else if(listId instanceof ListVal){
         arrayList = listId;
      }
      if(arrayList instanceof ListVal) {
         List<Integer> arrList = ((ListVal) arrayList).getVal();
         if(arrList != null && !arrList.isEmpty()) {
            _ret = (R) new ListVal(arrList.subList(1, arrList.size()));
         } else {
            printMsg("cdr on empty list is now valid.");
         }
      }
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "set!"
    * f2 -> Identifier()
    * f3 -> Expression()
    * f4 -> ")"
    */
   public R visit(Assignment n, A argu) {
      R _ret=null;
      R varId = n.f2.accept(this, argu);
      R expression = n.f3.accept(this, argu);
      if(varId != null && expression != null) {
         assignmentExp(varId.getVal().toString(), expression, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> "lambda"
    * f2 -> "("
    * f3 -> ( Identifier() )*
    * f4 -> ")"
    * f5 -> Expression()
    * f6 -> ")"
    */
   public R visit(ProcedureExp n, A argu) {
      R _ret=null;
      ProcVal procVal = new ProcVal();
      DEFINITION = true;
      for(Node node : n.f3.nodes) {
         RetVal retVal = node.accept(this, argu);
         procVal.addPram(retVal);
      }
      R body = n.f5.accept(this, argu);
      procVal.setProcBody(body);
      n.f6.accept(this, argu);
      _ret = (R) procVal;
      DEFINITION = false;
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ( Expression() )*
    * f3 -> ")"
    */
   public R visit(Application n, A argu) {
      R _ret=null,value;
      Env env = new Env();
      n.f0.accept(this, argu);
      R proc = n.f1.accept(this, argu);
      if(proc instanceof ProcVal) {
         value = proc;
      } else {
         value = (R) argu.map.get(proc.getVal());
      }
      ProcVal procedure = (ProcVal) value;
      RetVal procBody = procedure.getProcBody();
      int j = 0;
      if(n.f2.nodes.size() == procedure.getPrams().size()) {
         for(Node node : n.f2.nodes) {
            R actualArgs = node.accept(this, argu);
            RetVal formalArgs = procedure.getPrams().get(j);
            env.map.put((String) formalArgs.getVal(), actualArgs);
            j++;
         }
      } else {
            System.out.println(String.format(par_mis_match, procedure.getPrams().size(), n.f2.nodes.size()));
            return null;
      }
      env.parEnv = procedure.getParEnv();
      if(procBody instanceof ProcVal) {
         ProcVal provVal = new ProcVal();
         provVal.setPrams(((ProcVal) procBody).getPrams());
         provVal.setProcBody(((ProcVal) procBody).getProcBody());
         provVal.setParEnv(env);
         _ret = (R) provVal;
      } else {
         try {
            String expressionString = (String) procBody.getVal();
            String constExp = "";
            for(int i = 0 ; i < expressionString.length() ; i++) {
               constExp += getVarValue(String.valueOf(expressionString.charAt(i)), env);
            }
            constExp += ";";
            Object res = se.eval(constExp);
            if(res instanceof Boolean){
               _ret = (R) new BoolValue((Boolean) res);
            } else if (res instanceof Integer) {
               _ret = (R) new IntVal((Integer) res);
            }
         } catch (Exception e) {
            printMsg("exception in procedure application.");
         }
      }
      return _ret;
   }

   public R fetchOpr(R ret, A argu) {
      if(argu != null) {
         if(argu.map.get(ret.getVal()) != null) {
            return (R) argu.map.get(ret.getVal());
         } else {
            return fetchOpr(ret, (A) argu.parEnv);
         }
      } else {
         return ret;
      }
   }

   private String getVarValue(String var, Env env) {
      if(env != null) {
         if(env.map.containsKey(var)) {
            return env.map.get(var).getVal().toString();
         } else {
            return getVarValue(var, env.parEnv);
         }
      } else {
         return var;
      }
   }

   private RetVal fetchRetVal(String k, A env) {
      if(env != null) {
         if(env.map.get(k) != null) {
            return env.map.get(k);
         } else {
            return fetchRetVal(k, (A) env.parEnv);
         }
      } else {
         return null;
      }
   }

   private void assignmentExp(String key, RetVal val, A env) {
      if(env != null) {
         if(env.map.get(key) != null) {
            env.map.put(key, val);
         } else {
            assignmentExp(key, val, (A) env.parEnv);
         }
      }
   }

   private void printMsg(String msg) {
      System.out.println(msg);
   }
}
